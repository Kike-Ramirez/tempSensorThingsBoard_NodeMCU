/*
    MIT License
    Copyright (c) 2018, Enrique Ram√≠rez
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THEM
    SOFTWARE.
*/


// Library Import for OLED Display
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Fonts/FreeSans9pt7b.h>

// For touch Sensor
#include <CapacitiveSensor.h>

// For temperature & humidity sensor
#include <DHT.h>
// #include <DHT_U.h>

// For main operations & Thinger.io processes
#include <ESP8266WiFi.h>
#include <ThingerESP8266.h>

/*
 * 
 * PIN DEFINITIONS -----------> DHT, TOUCH & DISPLAY
 * 
 */
#define DHTPIN            D6         // Pin which is connected to the DHT sensor.
#define DHTTYPE           DHT22     // DHT 22 (AM2302)

#define CAP_TX            D8
#define CAP_RX            D7
#define TOUCH_LEVEL       20.0

#define OLED_RESET        LED_BUILTIN

#define MOISTURE_PIN      A0
#define WATER_LEVEL       440.0
#define DRY_LEVEL         770.0

// WIFI ACCESS PARAMETERS -----------> SSID & PASSWORD FOR WIFI ACCESS (NOT 5G)
#define SSID "CarmenLauraKike"
#define SSID_PASSWORD "Carmen2016"

// THINGER.IO -----------> USER, PWD & DEVICE CREDENTIALS, TOKEN, ETC.
#define USERNAME "KikeRamirez"
#define DEVICE_ID "P002"
#define DEVICE_CREDENTIAL "kXxCaZh%gifA"

// GENERAL PARAMETERS -----------> TIMINGS, FLAGS, DATA, ETC.
#define TIMER_MEASURE 1000.0
#define TIMER_TOUCH 200.0
#define TIMER_DISPLAY 5000.0
#define VERBOSITY 0

// GLOBAL VARIABLES -----------> TIMINGS, FLAGS, DATA, ETC.
float temperature, humidity, moisture;
float timeDisplay, timeMeasure, timeTouch;
bool touchPressed;
float offsetX;

// Status for Device
// 0 - Not connected to Internet
// 1 - Connected, but on sleep mode
// 2 - Normal mode - Temp
// 3 - Normal mode - Humidity
// 4 - Normal mode - Moisture
// 5 - Normal mode - Time & Date


int statusDevice;
int lastStatusDevice;

// INITIALIZE OBJECTS FOR -----------> NODE IOT, DISPLAY, TOUCH SENSOR, TEMP&HUMID SENSOR.
Adafruit_SSD1306 display(OLED_RESET);
ThingerESP8266 thing(USERNAME, DEVICE_ID, DEVICE_CREDENTIAL);
DHT dht(DHTPIN, DHTTYPE);
CapacitiveSensor cs = CapacitiveSensor(CAP_TX,CAP_RX);

// Logos & Images
const unsigned char thinger_logo [] PROGMEM = {
  // 'thinger_logo, 128x32px
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf2, 0x7f, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x8f, 0x9f, 0xff, 0xf9, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xbf, 0xef, 0xff, 0x79, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x8f, 0x8f, 0xff, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x6f, 0xfe, 0x19, 0x1e, 0xec, 0xfc, 0x0e, 0x3d, 0x3e, 0x78, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x81, 0xef, 0xfc, 0x08, 0x0c, 0xe0, 0x38, 0x08, 0x18, 0x3e, 0x70, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0x81, 0xef, 0xfe, 0x78, 0xcc, 0xe7, 0x33, 0x99, 0xc8, 0xfe, 0x67, 0x3f, 0xff, 0xff, 0xff, 
  0xfe, 0x01, 0x93, 0xfe, 0x79, 0xcc, 0xe7, 0x33, 0x93, 0xc9, 0xfe, 0x67, 0x9f, 0xff, 0xff, 0xff, 
  0xf1, 0xf0, 0x7c, 0xfe, 0x79, 0xcc, 0xe7, 0x33, 0x90, 0x09, 0xfe, 0x67, 0x9f, 0xff, 0xff, 0xff, 
  0xf7, 0xf9, 0xfe, 0x7e, 0x79, 0xcc, 0xe7, 0x38, 0x33, 0xf9, 0xfe, 0x67, 0x9f, 0xff, 0xff, 0xff, 
  0xf1, 0xe4, 0x38, 0x7e, 0x79, 0xcc, 0xe7, 0x30, 0x73, 0xf9, 0xfe, 0x67, 0x9f, 0xff, 0xff, 0xff, 
  0xf0, 0x1c, 0x07, 0x7e, 0x79, 0xcc, 0xe7, 0x33, 0xf9, 0xd9, 0xc6, 0x63, 0x3f, 0xff, 0xff, 0xff, 
  0xf0, 0x3c, 0x0f, 0x7f, 0x09, 0xcc, 0xe7, 0x30, 0x1c, 0x09, 0xc6, 0x70, 0x3f, 0xff, 0xff, 0xff, 
  0xf0, 0x3c, 0x0f, 0x7f, 0x9f, 0xff, 0xff, 0xf0, 0x0e, 0x3f, 0xef, 0xfc, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0x30, 0x0e, 0x7f, 0xff, 0xff, 0xff, 0xf7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x0f, 0x09, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x1f, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x99, 0x33, 0x59, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xed, 0x7f, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7b, 0xfd, 0x7f, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7b, 0xef, 0x7f, 0xbf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char wifi_logo [] PROGMEM = {
  // 'wifi_logo, 128x32px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x1f, 0xf0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x7f, 0xfe, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*
 * 
 * SETUP PROCESS -----------> INITIALIZE EVERYTHING AND SETS ZERO CONDITION
 * 
 */

void setup()   {                

  if (VERBOSITY) {
    Serial.begin(9600);
    Serial.println("Starting...");
  }

  // Declare MOISTURE_PIN as an input
  pinMode(MOISTURE_PIN, INPUT);

  // Initialize OLED display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x32)

  // Initialize IOT Node and connect to WIFI
  thing.add_wifi(SSID, SSID_PASSWORD);
  
  // Declare output parameter "temperature"
  thing["temperature"] >> [](pson& out){
        out = temperature;
  };

  // Declare output parameter "humidity"
  thing["humidity"] >> [](pson& out){
        out = humidity;
  };  

  // Declare output parameter "humidity"
  thing["moisture"] >> [](pson& out){
        out = moisture;
  };  
  
  // Print logs
  if (VERBOSITY) Serial.println("Connected to Thinger.io!");
  
  // Initialize OLED Display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x32)

  // text display tests
  // display.setFont(&FreeSans9pt7b);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);  
  display.setTextWrap(false);

  // Clear the buffer.
  display.clearDisplay();

  // Print welcome screen
  // display.println("Connecting...");

  // Clear display
  display.display();
  
  // Initialize touch sensor
  cs.set_CS_AutocaL_Millis(0xFFFFFFFF);     // turn off autocalibrate on channel 1 - TOUCH SENSOR

  // Initialize temp & humidity sensor
  dht.begin();    

  // Initialize timers & variables
  timeDisplay = millis() - TIMER_DISPLAY;
  timeMeasure = millis() - TIMER_MEASURE;
  timeTouch = millis() - TIMER_TOUCH;
  temperature = 0;
  humidity = 0;
  moisture = 0;
  
  statusDevice = 0;
  lastStatusDevice = 0;
  touchPressed = false;
  offsetX = -128;
  // Print logs
  if (VERBOSITY) Serial.println("Display & sensors ok.");

}


/*
 * 
 * LOOP -----------> 
 * 
 */

void loop() {

  float currentTime = millis();
 
  if (currentTime - timeTouch > TIMER_TOUCH) {
    
    check_status();

    if (VERBOSITY) Serial.println("Device Status: " + statusDevice );

    timeTouch = millis();
  }

  if (currentTime - timeMeasure > TIMER_MEASURE) {

    // Read temperature and check it is valid
    temperature = dht.readTemperature();
    while (isnan(temperature)) {
      temperature = dht.readTemperature();    
    }

    // Read air relative humidity and check it is valid
    humidity = dht.readHumidity();
    while (isnan(humidity)) {
      humidity = dht.readHumidity();    
    }

    // Read soil moisture and check it is valid
    float moistureRaw = analogRead(MOISTURE_PIN); 

    while (isnan(moisture)) {
      moistureRaw = analogRead(A0);    
    }

    moisture = map(moistureRaw, WATER_LEVEL, DRY_LEVEL, 100.0, 0.0);

    if (VERBOSITY) Serial.println("Measure done: " + String(temperature) + "¬∫C - " + String(humidity) + "% + " + String(moisture) + "%" );

    timeMeasure = millis();
  }
  
  // Manage Thinger.io updates
  thing.handle();

  // Update image in OLED Display
  update_display();

  // Print logs
  if (VERBOSITY) Serial.println("Loop done!");

}

/*
 * 
 * CHECK TOUCH SENSOR -----------> UPDATES SLEEP MODE DEPENDING ON TOUCHES & TIMERS
 * 
 */

void check_status() {

  float capMeasure = cs.capacitiveSensor(30);

  lastStatusDevice = statusDevice;
  
  if (VERBOSITY) {
    Serial.print("  -> Checking STATUS ( ACTIVE / INACTIVE ) by measurint TOUCH SENSOR level: ");
    Serial.print(capMeasure);
  }

  if( WiFi.status() != WL_CONNECTED) {
      Serial.println("Not connected to Internet!!");
      statusDevice = 0;
  }
  
  // Updating touching status & timings
  if (( cs.capacitiveSensor(30) > TOUCH_LEVEL) && (millis() - timeDisplay < TIMER_DISPLAY)) {
    timeDisplay = millis();
    touchPressed = true;
  }

  else if ( cs.capacitiveSensor(30) > TOUCH_LEVEL) {
    timeDisplay = millis();
    if (VERBOSITY) Serial.println(" - ACTIVE");
    statusDevice = 2;
  }


  else if (millis() - timeDisplay < TIMER_DISPLAY) {
    if (VERBOSITY) Serial.println(" - ACTIVE");
    if (touchPressed) {
      touchPressed = false;
      statusDevice += 1;
      if (statusDevice > 5) statusDevice = 1;
    }
  }
    
  else {
    if (VERBOSITY) Serial.println(" - INACTIVE");
    statusDevice = 1;
  }
}

/*
 * 
 * UPDATE DISPLAY -----------> UPDATES DISPLAY WITH NEW DATA, SPRITES, ANIMATIONS, ETC.
 * 
 */

float update_display() {

  if (VERBOSITY) Serial.println("  -> Printing on OLED Display");

  if (statusDevice == 0) {

    // Clear Screen
    display.clearDisplay();
    // Reset Position
    display.setCursor(0,0);
    display.setTextSize(2);

    display.drawBitmap(0, 0, wifi_logo, 128, 32, WHITE);
  
    // Send to OLED
    display.display();
    
  }

  if (statusDevice == 1) {

    // Clear Screen
    display.clearDisplay();
 
    // Send to OLED
    display.display();
  }
  
  if (statusDevice > 1) {

    // Clear Screen
    display.clearDisplay();
    // Reset Position
    display.setCursor(0 + offsetX,0);
  
    // Print temperature
    display.setTextSize(1);
    display.println("Temperature: ");
    display.setTextSize(2);
    display.print(temperature);
    display.println(" C");

    // Reset Position
    display.setCursor(128 + offsetX,0);
  
    // Print humidity
    display.setTextSize(1);
    display.println("Humidity: ");
    display.setTextSize(2);
    display.print(humidity);
    display.println(" %");
    
    // Reset Position
    display.setCursor(256 + offsetX,0);
  
    // Print moisture
    display.setTextSize(1);
    display.println("Moisture: ");
    display.setTextSize(2);
    display.print(moisture);
    display.println(" %");    
    
    // Reset Position
    display.setCursor(384 + offsetX,0);
  
    // Print date & time
    display.setTextSize(1);
    display.println("26.8.2018");
    display.setTextSize(2);
    display.println("00:32:15");
        
    // Send to OLED
    display.display();
  
  }

}
